// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

//Caleb Knight

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //First Mux
    Not(in=instruction[15], out=notIn);
    Mux16(a=outALU, b=instruction, sel=notIn, out=outMorInstruction);

    //Registers
    Or(a=instruction[5], b=notIn, out=loadA);
    ARegister(in=outMorInstruction, load=loadA, out=outA, out[0..14]=addressM);
    Mux16(a=outA, b=inM, sel=AorM, out=outAM);

    And(a=instruction[14], b=instruction[4], out=loadD);
    DRegister(in=outALU, load=loadD, out=outD);

    //Second Mux
    And(a=instruction[12],b=instruction[15],out=AorM);

    //ALU Control Bits
    ALU(x=outD, y=outAM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8],
    f=instruction[7], no=instruction[6], out=outM, out=outALU, zr=zr, ng=ng);

    //Reset Decider.. zr if out==0 ng if out<0
    Not(in=zr, out=notZR);
    Not(in=ng, out=positive);


    //Jumps

    //JGT 001 Jump Greater Than Zero
    And(a=notZR, b=positive, out=positiveAndnotZR);
    And(a=positiveAndnotZR, b=instruction[0], out=jgt);
    And(a=jgt, b=instruction[15], out=JGT);

    //JEQ 010 Jump Equal to Zero
    And(a=zr, b=instruction[1], out=jeq);
    And(a=jeq, b=instruction[15], out=JEQ);

    //JGE 011 Jump Greater Than or Equal to Zero
    And(a=instruction[0], b=instruction[1], out=jge1);
    And(a=jge1, b=positive, out=jge);
    And(a=jge, b=instruction[15], out=JGE);

    //JLT 100 Jump Less Than Zero
    And(a=ng, b=instruction[2], out=jlt);
    And(a=jlt, b=instruction[15], out=JLT);

    //JNE 101 Jump Not Equal to Zero
    And(a=instruction[0], b=instruction[2], out=jne1);
    And(a=notZR, b=jne1, out=jne);
    And(a=jne, b=instruction[15], out=JNE);

    //JLE 110 Jump Less Than or Equal to Zero
    And(a=instruction[1], b=instruction[2], out=jle1);
    Or(a=zr, b=ng, out=lessZR);
    And(a=lessZR, b=jle1, out=jle);
    And(a=jle, b=instruction[15], out=JLE);

    //JMP 111 Jump Always
    And(a=jge1, b=jne1, out=jmp);
    And(a=jmp, b=instruction[15], out=JMP);

    //writeM
    And(a=instruction[3], b=instruction[15], out=writeM);

    //Choose jumps
    Or8Way(in[0]=JGT, in[1]=JEQ, in[2]=JGE, in[3]=JLT, in[4]=JNE, in[5]=JLE, in[6]=JMP, in[7]=false, out=intoPC);

    //PC
    PC(in=outA, load=intoPC, inc=true, reset=reset, out[0..14]=pc);

}
